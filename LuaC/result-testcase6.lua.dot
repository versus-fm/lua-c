digraph {
  0[label="Sequence"];
  1[label="Function"];
  0 -> 1
  2[label="ExpressionList"];
  1 -> 2
  3[label="n"];
  2 -> 3
  4[label="Sequence"];
  1 -> 4
  5[label="If"];
  4 -> 5
  6[label="<"];
  5 -> 6
  7[label="n"];
  6 -> 7
  8[label="Constant: 3"];
  6 -> 8
  9[label="Sequence"];
  5 -> 9
  10[label="Return"];
  9 -> 10
  11[label="ExpressionList"];
  10 -> 11
  12[label="Constant: 1"];
  11 -> 12
  13[label="Sequence"];
  5 -> 13
  14[label="Return"];
  13 -> 14
  15[label="ExpressionList"];
  14 -> 15
  16[label="+"];
  15 -> 16
  17[label="Call"];
  16 -> 17
  18[label="fibonacci"];
  17 -> 18
  19[label="ExpressionList"];
  17 -> 19
  20[label="-"];
  19 -> 20
  21[label="n"];
  20 -> 21
  22[label="Constant: 1"];
  20 -> 22
  23[label="Call"];
  16 -> 23
  24[label="fibonacci"];
  23 -> 24
  25[label="ExpressionList"];
  23 -> 25
  26[label="-"];
  25 -> 26
  27[label="n"];
  26 -> 27
  28[label="Constant: 2"];
  26 -> 28
  29[label="For"];
  0 -> 29
  30[label="Assignment"];
  29 -> 30
  31[label="n"];
  30 -> 31
  32[label="Constant: 1"];
  30 -> 32
  33[label="Constant: 16"];
  29 -> 33
  34[label="Sequence"];
  29 -> 34
  35[label="CallStatement"];
  34 -> 35
  36[label="Call"];
  35 -> 36
  37[label="SubAccess"];
  36 -> 37
  38[label="io"];
  37 -> 38
  39[label="write"];
  37 -> 39
  40[label="ExpressionList"];
  36 -> 40
  41[label="Call"];
  40 -> 41
  42[label="fibonacci"];
  41 -> 42
  43[label="ExpressionList"];
  41 -> 43
  44[label="n"];
  43 -> 44
  45[label="Constant: , "];
  40 -> 45
  46[label="CallStatement"];
  0 -> 46
  47[label="Call"];
  46 -> 47
  48[label="SubAccess"];
  47 -> 48
  49[label="io"];
  48 -> 49
  50[label="write"];
  48 -> 50
  51[label="ExpressionList"];
  47 -> 51
  52[label="Constant: ...\n"];
  51 -> 52
}
